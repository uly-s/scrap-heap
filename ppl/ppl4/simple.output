Terminals unused in grammar

   T_NUM
   T_REPEAT
   T_UNTIL
   T_DO
   T_WHILE
   T_IF
   T_THEN
   T_ELSE
   T_LPAR
   T_RPAR
   T_LT
   T_GT


State 5 conflicts: 1 shift/reduce


Grammar

    0 $accept: program T_EOF

    1 program: stmt_list T_SEMICOLON

    2 stmt_list: stmt_list T_SEMICOLON stmt
    3          | stmt

    4 stmt: assignment
    5     | read
    6     | write
    7     | declaration
    8     | block

    9 block: T_BEGIN stmt_list T_END

   10 assignment: varref '[' a_expr ']' T_ASSIGN a_expr

   11 declaration: datatype array_size T_ID

   12 array_size: T_INTEGER
   13           | %empty

   14 datatype: T_DT_INT
   15         | T_DT_FLOAT

   16 a_expr: a_expr T_ADD a_term
   17       | a_expr T_SUB a_term
   18       | a_term

   19 a_term: a_term T_MUL a_fact
   20       | a_term T_DIV a_fact
   21       | a_fact

   22 a_fact: varref
   23       | T_INTEGER
   24       | T_FLOAT
   25       | '(' a_expr ')'
   26       | T_SUB a_fact
   27       | T_LITERAL_STR

   28 varref: T_ID index

   29 index: '[' a_expr ']'
   30      | %empty

   31 read: T_READ varlist

   32 write: T_WRITE expr_list

   33 varlist: varlist T_COMMA varref
   34        | varref

   35 expr_list: expr_list T_COMMA a_expr
   36          | a_expr


Terminals, with rules where they appear

T_EOF (0) 0
'(' (40) 25
')' (41) 25
'[' (91) 10 29
']' (93) 10 29
error (256)
T_NUM (258)
T_ASSIGN (259) 10
T_ADD (260) 16
T_SUB (261) 17 26
T_MUL (262) 19
T_DIV (263) 20
T_DT_INT (264) 14
T_DT_FLOAT (265) 15
T_LITERAL_STR (266) 27
T_READ (267) 31
T_WRITE (268) 32
T_SEMICOLON (269) 1 2
T_COMMA (270) 33 35
T_ID (271) 11 28
T_INTEGER (272) 12 23
T_FLOAT (273) 24
T_BEGIN (274) 9
T_END (275) 9
T_REPEAT (276)
T_UNTIL (277)
T_DO (278)
T_WHILE (279)
T_IF (280)
T_THEN (281)
T_ELSE (282)
T_LPAR (283)
T_RPAR (284)
T_LT (285)
T_GT (286)


Nonterminals, with rules where they appear

$accept (36)
    on left: 0
program (37)
    on left: 1, on right: 0
stmt_list (38)
    on left: 2 3, on right: 1 2 9
stmt (39)
    on left: 4 5 6 7 8, on right: 2 3
block (40)
    on left: 9, on right: 8
assignment (41)
    on left: 10, on right: 4
declaration (42)
    on left: 11, on right: 7
array_size (43)
    on left: 12 13, on right: 11
datatype (44)
    on left: 14 15, on right: 11
a_expr (45)
    on left: 16 17 18, on right: 10 16 17 25 29 35 36
a_term (46)
    on left: 19 20 21, on right: 16 17 18 19 20
a_fact (47)
    on left: 22 23 24 25 26 27, on right: 19 20 21 26
varref (48)
    on left: 28, on right: 10 22 33 34
index (49)
    on left: 29 30, on right: 28
read (50)
    on left: 31, on right: 5
write (51)
    on left: 32, on right: 6
varlist (52)
    on left: 33 34, on right: 31 33
expr_list (53)
    on left: 35 36, on right: 32 35


State 0

    0 $accept: . program T_EOF

    T_DT_INT    shift, and go to state 1
    T_DT_FLOAT  shift, and go to state 2
    T_READ      shift, and go to state 3
    T_WRITE     shift, and go to state 4
    T_ID        shift, and go to state 5
    T_BEGIN     shift, and go to state 6

    program      go to state 7
    stmt_list    go to state 8
    stmt         go to state 9
    block        go to state 10
    assignment   go to state 11
    declaration  go to state 12
    datatype     go to state 13
    varref       go to state 14
    read         go to state 15
    write        go to state 16


State 1

   14 datatype: T_DT_INT .

    $default  reduce using rule 14 (datatype)


State 2

   15 datatype: T_DT_FLOAT .

    $default  reduce using rule 15 (datatype)


State 3

   31 read: T_READ . varlist

    T_ID  shift, and go to state 5

    varref   go to state 17
    varlist  go to state 18


State 4

   32 write: T_WRITE . expr_list

    T_SUB          shift, and go to state 19
    T_LITERAL_STR  shift, and go to state 20
    T_ID           shift, and go to state 5
    T_INTEGER      shift, and go to state 21
    T_FLOAT        shift, and go to state 22
    '('            shift, and go to state 23

    a_expr     go to state 24
    a_term     go to state 25
    a_fact     go to state 26
    varref     go to state 27
    expr_list  go to state 28


State 5

   28 varref: T_ID . index

    '['  shift, and go to state 29

    '['       [reduce using rule 30 (index)]
    $default  reduce using rule 30 (index)

    index  go to state 30


State 6

    9 block: T_BEGIN . stmt_list T_END

    T_DT_INT    shift, and go to state 1
    T_DT_FLOAT  shift, and go to state 2
    T_READ      shift, and go to state 3
    T_WRITE     shift, and go to state 4
    T_ID        shift, and go to state 5
    T_BEGIN     shift, and go to state 6

    stmt_list    go to state 31
    stmt         go to state 9
    block        go to state 10
    assignment   go to state 11
    declaration  go to state 12
    datatype     go to state 13
    varref       go to state 14
    read         go to state 15
    write        go to state 16


State 7

    0 $accept: program . T_EOF

    T_EOF  shift, and go to state 32


State 8

    1 program: stmt_list . T_SEMICOLON
    2 stmt_list: stmt_list . T_SEMICOLON stmt

    T_SEMICOLON  shift, and go to state 33


State 9

    3 stmt_list: stmt .

    $default  reduce using rule 3 (stmt_list)


State 10

    8 stmt: block .

    $default  reduce using rule 8 (stmt)


State 11

    4 stmt: assignment .

    $default  reduce using rule 4 (stmt)


State 12

    7 stmt: declaration .

    $default  reduce using rule 7 (stmt)


State 13

   11 declaration: datatype . array_size T_ID

    T_INTEGER  shift, and go to state 34

    $default  reduce using rule 13 (array_size)

    array_size  go to state 35


State 14

   10 assignment: varref . '[' a_expr ']' T_ASSIGN a_expr

    '['  shift, and go to state 36


State 15

    5 stmt: read .

    $default  reduce using rule 5 (stmt)


State 16

    6 stmt: write .

    $default  reduce using rule 6 (stmt)


State 17

   34 varlist: varref .

    $default  reduce using rule 34 (varlist)


State 18

   31 read: T_READ varlist .
   33 varlist: varlist . T_COMMA varref

    T_COMMA  shift, and go to state 37

    $default  reduce using rule 31 (read)


State 19

   26 a_fact: T_SUB . a_fact

    T_SUB          shift, and go to state 19
    T_LITERAL_STR  shift, and go to state 20
    T_ID           shift, and go to state 5
    T_INTEGER      shift, and go to state 21
    T_FLOAT        shift, and go to state 22
    '('            shift, and go to state 23

    a_fact  go to state 38
    varref  go to state 27


State 20

   27 a_fact: T_LITERAL_STR .

    $default  reduce using rule 27 (a_fact)


State 21

   23 a_fact: T_INTEGER .

    $default  reduce using rule 23 (a_fact)


State 22

   24 a_fact: T_FLOAT .

    $default  reduce using rule 24 (a_fact)


State 23

   25 a_fact: '(' . a_expr ')'

    T_SUB          shift, and go to state 19
    T_LITERAL_STR  shift, and go to state 20
    T_ID           shift, and go to state 5
    T_INTEGER      shift, and go to state 21
    T_FLOAT        shift, and go to state 22
    '('            shift, and go to state 23

    a_expr  go to state 39
    a_term  go to state 25
    a_fact  go to state 26
    varref  go to state 27


State 24

   16 a_expr: a_expr . T_ADD a_term
   17       | a_expr . T_SUB a_term
   36 expr_list: a_expr .

    T_ADD  shift, and go to state 40
    T_SUB  shift, and go to state 41

    $default  reduce using rule 36 (expr_list)


State 25

   18 a_expr: a_term .
   19 a_term: a_term . T_MUL a_fact
   20       | a_term . T_DIV a_fact

    T_MUL  shift, and go to state 42
    T_DIV  shift, and go to state 43

    $default  reduce using rule 18 (a_expr)


State 26

   21 a_term: a_fact .

    $default  reduce using rule 21 (a_term)


State 27

   22 a_fact: varref .

    $default  reduce using rule 22 (a_fact)


State 28

   32 write: T_WRITE expr_list .
   35 expr_list: expr_list . T_COMMA a_expr

    T_COMMA  shift, and go to state 44

    $default  reduce using rule 32 (write)


State 29

   29 index: '[' . a_expr ']'

    T_SUB          shift, and go to state 19
    T_LITERAL_STR  shift, and go to state 20
    T_ID           shift, and go to state 5
    T_INTEGER      shift, and go to state 21
    T_FLOAT        shift, and go to state 22
    '('            shift, and go to state 23

    a_expr  go to state 45
    a_term  go to state 25
    a_fact  go to state 26
    varref  go to state 27


State 30

   28 varref: T_ID index .

    $default  reduce using rule 28 (varref)


State 31

    2 stmt_list: stmt_list . T_SEMICOLON stmt
    9 block: T_BEGIN stmt_list . T_END

    T_SEMICOLON  shift, and go to state 46
    T_END        shift, and go to state 47


State 32

    0 $accept: program T_EOF .

    $default  accept


State 33

    1 program: stmt_list T_SEMICOLON .
    2 stmt_list: stmt_list T_SEMICOLON . stmt

    T_DT_INT    shift, and go to state 1
    T_DT_FLOAT  shift, and go to state 2
    T_READ      shift, and go to state 3
    T_WRITE     shift, and go to state 4
    T_ID        shift, and go to state 5
    T_BEGIN     shift, and go to state 6

    $default  reduce using rule 1 (program)

    stmt         go to state 48
    block        go to state 10
    assignment   go to state 11
    declaration  go to state 12
    datatype     go to state 13
    varref       go to state 14
    read         go to state 15
    write        go to state 16


State 34

   12 array_size: T_INTEGER .

    $default  reduce using rule 12 (array_size)


State 35

   11 declaration: datatype array_size . T_ID

    T_ID  shift, and go to state 49


State 36

   10 assignment: varref '[' . a_expr ']' T_ASSIGN a_expr

    T_SUB          shift, and go to state 19
    T_LITERAL_STR  shift, and go to state 20
    T_ID           shift, and go to state 5
    T_INTEGER      shift, and go to state 21
    T_FLOAT        shift, and go to state 22
    '('            shift, and go to state 23

    a_expr  go to state 50
    a_term  go to state 25
    a_fact  go to state 26
    varref  go to state 27


State 37

   33 varlist: varlist T_COMMA . varref

    T_ID  shift, and go to state 5

    varref  go to state 51


State 38

   26 a_fact: T_SUB a_fact .

    $default  reduce using rule 26 (a_fact)


State 39

   16 a_expr: a_expr . T_ADD a_term
   17       | a_expr . T_SUB a_term
   25 a_fact: '(' a_expr . ')'

    T_ADD  shift, and go to state 40
    T_SUB  shift, and go to state 41
    ')'    shift, and go to state 52


State 40

   16 a_expr: a_expr T_ADD . a_term

    T_SUB          shift, and go to state 19
    T_LITERAL_STR  shift, and go to state 20
    T_ID           shift, and go to state 5
    T_INTEGER      shift, and go to state 21
    T_FLOAT        shift, and go to state 22
    '('            shift, and go to state 23

    a_term  go to state 53
    a_fact  go to state 26
    varref  go to state 27


State 41

   17 a_expr: a_expr T_SUB . a_term

    T_SUB          shift, and go to state 19
    T_LITERAL_STR  shift, and go to state 20
    T_ID           shift, and go to state 5
    T_INTEGER      shift, and go to state 21
    T_FLOAT        shift, and go to state 22
    '('            shift, and go to state 23

    a_term  go to state 54
    a_fact  go to state 26
    varref  go to state 27


State 42

   19 a_term: a_term T_MUL . a_fact

    T_SUB          shift, and go to state 19
    T_LITERAL_STR  shift, and go to state 20
    T_ID           shift, and go to state 5
    T_INTEGER      shift, and go to state 21
    T_FLOAT        shift, and go to state 22
    '('            shift, and go to state 23

    a_fact  go to state 55
    varref  go to state 27


State 43

   20 a_term: a_term T_DIV . a_fact

    T_SUB          shift, and go to state 19
    T_LITERAL_STR  shift, and go to state 20
    T_ID           shift, and go to state 5
    T_INTEGER      shift, and go to state 21
    T_FLOAT        shift, and go to state 22
    '('            shift, and go to state 23

    a_fact  go to state 56
    varref  go to state 27


State 44

   35 expr_list: expr_list T_COMMA . a_expr

    T_SUB          shift, and go to state 19
    T_LITERAL_STR  shift, and go to state 20
    T_ID           shift, and go to state 5
    T_INTEGER      shift, and go to state 21
    T_FLOAT        shift, and go to state 22
    '('            shift, and go to state 23

    a_expr  go to state 57
    a_term  go to state 25
    a_fact  go to state 26
    varref  go to state 27


State 45

   16 a_expr: a_expr . T_ADD a_term
   17       | a_expr . T_SUB a_term
   29 index: '[' a_expr . ']'

    T_ADD  shift, and go to state 40
    T_SUB  shift, and go to state 41
    ']'    shift, and go to state 58


State 46

    2 stmt_list: stmt_list T_SEMICOLON . stmt

    T_DT_INT    shift, and go to state 1
    T_DT_FLOAT  shift, and go to state 2
    T_READ      shift, and go to state 3
    T_WRITE     shift, and go to state 4
    T_ID        shift, and go to state 5
    T_BEGIN     shift, and go to state 6

    stmt         go to state 48
    block        go to state 10
    assignment   go to state 11
    declaration  go to state 12
    datatype     go to state 13
    varref       go to state 14
    read         go to state 15
    write        go to state 16


State 47

    9 block: T_BEGIN stmt_list T_END .

    $default  reduce using rule 9 (block)


State 48

    2 stmt_list: stmt_list T_SEMICOLON stmt .

    $default  reduce using rule 2 (stmt_list)


State 49

   11 declaration: datatype array_size T_ID .

    $default  reduce using rule 11 (declaration)


State 50

   10 assignment: varref '[' a_expr . ']' T_ASSIGN a_expr
   16 a_expr: a_expr . T_ADD a_term
   17       | a_expr . T_SUB a_term

    T_ADD  shift, and go to state 40
    T_SUB  shift, and go to state 41
    ']'    shift, and go to state 59


State 51

   33 varlist: varlist T_COMMA varref .

    $default  reduce using rule 33 (varlist)


State 52

   25 a_fact: '(' a_expr ')' .

    $default  reduce using rule 25 (a_fact)


State 53

   16 a_expr: a_expr T_ADD a_term .
   19 a_term: a_term . T_MUL a_fact
   20       | a_term . T_DIV a_fact

    T_MUL  shift, and go to state 42
    T_DIV  shift, and go to state 43

    $default  reduce using rule 16 (a_expr)


State 54

   17 a_expr: a_expr T_SUB a_term .
   19 a_term: a_term . T_MUL a_fact
   20       | a_term . T_DIV a_fact

    T_MUL  shift, and go to state 42
    T_DIV  shift, and go to state 43

    $default  reduce using rule 17 (a_expr)


State 55

   19 a_term: a_term T_MUL a_fact .

    $default  reduce using rule 19 (a_term)


State 56

   20 a_term: a_term T_DIV a_fact .

    $default  reduce using rule 20 (a_term)


State 57

   16 a_expr: a_expr . T_ADD a_term
   17       | a_expr . T_SUB a_term
   35 expr_list: expr_list T_COMMA a_expr .

    T_ADD  shift, and go to state 40
    T_SUB  shift, and go to state 41

    $default  reduce using rule 35 (expr_list)


State 58

   29 index: '[' a_expr ']' .

    $default  reduce using rule 29 (index)


State 59

   10 assignment: varref '[' a_expr ']' . T_ASSIGN a_expr

    T_ASSIGN  shift, and go to state 60


State 60

   10 assignment: varref '[' a_expr ']' T_ASSIGN . a_expr

    T_SUB          shift, and go to state 19
    T_LITERAL_STR  shift, and go to state 20
    T_ID           shift, and go to state 5
    T_INTEGER      shift, and go to state 21
    T_FLOAT        shift, and go to state 22
    '('            shift, and go to state 23

    a_expr  go to state 61
    a_term  go to state 25
    a_fact  go to state 26
    varref  go to state 27


State 61

   10 assignment: varref '[' a_expr ']' T_ASSIGN a_expr .
   16 a_expr: a_expr . T_ADD a_term
   17       | a_expr . T_SUB a_term

    T_ADD  shift, and go to state 40
    T_SUB  shift, and go to state 41

    $default  reduce using rule 10 (assignment)
